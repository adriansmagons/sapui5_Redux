{"version":3,"names":["entityReducer","state","action","type","payload","sEntityName","oData","athletes","oAthlete","filter","_id","sAthleteId","oAthletes","fetchAthletes","dispatch","getState","bLoading","response","fetch","data","json","error","console","__exports","__esModule"],"sources":["entitySlice.mjs"],"sourcesContent":["\r\nexport const entityReducer = function (state = {}, action) {\r\n            switch (action.type) {\r\n                case \"LOAD_DATA\":\r\n                    return{\r\n                        ...state,\r\n                        [action.payload.sEntityName]: action.payload.oData\r\n                    }\r\n                case \"INSERT_ATHLETE\":\r\n                    return{\r\n                        ...state,\r\n                        athletes: {\r\n                            athletes:[\r\n                                ...state.athletes.athletes,\r\n                                action.payload.oAthlete\r\n                            ]\r\n                        }\r\n                    }\r\n\r\n                case \"DELETE_ATHLETE\":\r\n                    return{\r\n                        ...state,\r\n                        athletes: {\r\n                            athletes: state.athletes.athletes.filter(oAthlete => oAthlete._id !== action.payload.sAthleteId)\r\n                        }\r\n                    }\r\n\r\n                case \"INSERT_MULTIPLE_ATHLETES\":\r\n                     return{\r\n                        ...state,\r\n                        athletes: {\r\n                            athletes: action.payload.oAthletes\r\n                            \r\n                        }\r\n                    }\r\n                default: \r\n                    return state\r\n            }\r\n        }\r\n\r\nexport const fetchAthletes = async function (dispatch, getState) {        // Async thunk middleware\r\n    dispatch({type: 'LOADING', payload: {bLoading: true}})\r\n  try {\r\n    const response = await fetch('http://localhost:3000/api/athletes');\r\n    const data = await response.json();\r\n\r\n    dispatch({ type: 'INSERT_MULTIPLE_ATHLETES', payload: {oAthletes: data} })\r\n    dispatch({type: 'LOADING', payload: {bLoading: false}})\r\n  } catch (error) {\r\n    console.error('Fetching data failed:', error);\r\n  }\r\n}"],"mappings":";;;EACO,MAAMA,aAAa,GAAG,SAAAA,CAAUC,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAE;IAC/C,QAAQA,MAAM,CAACC,IAAI;MACf,KAAK,WAAW;QACZ,OAAM;UACF,GAAGF,KAAK;UACR,CAACC,MAAM,CAACE,OAAO,CAACC,WAAW,GAAGH,MAAM,CAACE,OAAO,CAACE;QACjD,CAAC;MACL,KAAK,gBAAgB;QACjB,OAAM;UACF,GAAGL,KAAK;UACRM,QAAQ,EAAE;YACNA,QAAQ,EAAC,CACL,GAAGN,KAAK,CAACM,QAAQ,CAACA,QAAQ,EAC1BL,MAAM,CAACE,OAAO,CAACI,QAAQ;UAE/B;QACJ,CAAC;MAEL,KAAK,gBAAgB;QACjB,OAAM;UACF,GAAGP,KAAK;UACRM,QAAQ,EAAE;YACNA,QAAQ,EAAEN,KAAK,CAACM,QAAQ,CAACA,QAAQ,CAACE,MAAM,CAACD,QAAQ,IAAIA,QAAQ,CAACE,GAAG,KAAKR,MAAM,CAACE,OAAO,CAACO,UAAU;UACnG;QACJ,CAAC;MAEL,KAAK,0BAA0B;QAC1B,OAAM;UACH,GAAGV,KAAK;UACRM,QAAQ,EAAE;YACNA,QAAQ,EAAEL,MAAM,CAACE,OAAO,CAACQ;UAE7B;QACJ,CAAC;MACL;QACI,OAAOX,KAAK;IACpB;EACJ,CAAC;EAEF,MAAMY,aAAa,GAAG,eAAAA,CAAgBC,QAAQ,EAAEC,QAAQ,EAAE;IAAS;IACtED,QAAQ,CAAC;MAACX,IAAI,EAAE,SAAS;MAAEC,OAAO,EAAE;QAACY,QAAQ,EAAE;MAAI;IAAC,CAAC,CAAC;IACxD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;MAClE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElCN,QAAQ,CAAC;QAAEX,IAAI,EAAE,0BAA0B;QAAEC,OAAO,EAAE;UAACQ,SAAS,EAAEO;QAAI;MAAE,CAAC,CAAC;MAC1EL,QAAQ,CAAC;QAACX,IAAI,EAAE,SAAS;QAAEC,OAAO,EAAE;UAACY,QAAQ,EAAE;QAAK;MAAC,CAAC,CAAC;IACzD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAAA,IAAAE,SAAA;IAAAC,UAAA;EAAA;EAAAD,SAAA,CAAAvB,aAAA,GAAAA,aAAA;EAAAuB,SAAA,CAAAV,aAAA,GAAAA,aAAA;EAAA,OAAAU,SAAA;AAAA","ignoreList":[],"file":"entitySlice-dbg.js"}